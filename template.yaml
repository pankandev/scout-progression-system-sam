AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Scout Spirit

  Personal Progression System for the Guides and Scouts movement.

Parameters:
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - test
    ConstraintDescription: Must specify prod or test.

Globals:
  Function:
    Timeout: 8
    Environment:
      Variables:
        WEB_APP_DOMAIN: !GetAtt CloudfrontDistribution.DomainName
        WEB_APP_BUCKET: !Ref S3BucketWebApp
        GALLERY_BUCKET: !Ref S3BucketGallery
        COGNITO_CLIENT_ID: !Ref UsersClient
        USER_POOL_ID: !Ref UsersPool

Resources:
  PPSAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: PPSAPI
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: UsersAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          UsersAuthorizer:
            UserPoolArn: !GetAtt UsersPool.Arn
      Models:
        ScouterSignUp:
          type: object
          required:
            - email
            - password
            - name
            - family_name
          properties:
            email:
              type: string
            password:
              type: string
            name:
              type: string
            middle_name:
              type: string
            family_name:
              type: string
        BeneficiarySignUp:
          type: object
          required:
            - email
            - password
            - name
            - family_name
            - birthdate
            - gender
          properties:
            email:
              type: string
            password:
              type: string
            name:
              type: string
            middle_name:
              type: string
            family_name:
              type: string
            birth_date:
              type: string
            unit:
              type: string
        Code:
          type: object
          required:
            - code
          properties:
            code:
              type: string
        Login:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
            password:
              type: string
        RefreshToken:
          type: object
          required:
            - token
          properties:
            token:
              type: string
        NewGroup:
          type: object
          required:
            - name
          properties:
            name:
              type: string
        StartObjective:
          type: object
          required:
            - tasks
          properties:
            stage:
              type: string
            tasks:
              type: list
  PPSAPIValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: PPSAPIValidator
      RestApiId: !Ref PPSAPI
      ValidateRequestBody: true
      ValidateRequestParameters: false
  # Core Layer
  PPSCore:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PPSCore
      Description: Core of the Personal Progression System
      CompatibleRuntimes:
        - python3.8
      ContentUri: pps/core-layer/
  # Cognito
  UsersPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Users
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Required: true
        - Name: middle_name
          AttributeDataType: String
          Required: false
        - Name: family_name
          AttributeDataType: String
          Required: true
        - Name: gender
          AttributeDataType: String
          Required: false
        - Name: birthdate
          AttributeDataType: String
          Required: false
        - Name: nickname
          AttributeDataType: String
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
  UsersClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: UsersClient
      UserPoolId: !Ref UsersPool
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      WriteAttributes:
        - email
        - name
        - middle_name
        - family_name
        - gender
        - birthdate
        - nickname
  UsersIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: UsersIdentities
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UsersClient
          ProviderName: !GetAtt UsersPool.ProviderName
  UsersPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UsersPool
      Domain: scout-spirit
  UsersScoutersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Scouters
      Description: Scouters group
      UserPoolId: !Ref UsersPool
  UsersBeneficiariesGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Beneficiaries
      Description: Beneficiaries group
      UserPoolId: !Ref UsersPool
  # User roles
  UsersAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: scout-spirit-authenticated-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              "StringEquals":
                "cognito-identity.amazonaws.com:aud": !Ref UsersIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Description: |
        Scout spirit authenticated Role
      Path: /scout-spirit/
      Policies:
        - PolicyName: ScoutSpiritAuthenticatedUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
  UsersUnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: scout-spirit-unauthenticated-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              "StringEquals":
                "cognito-identity.amazonaws.com:aud": !Ref UsersIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Description: |
        Scout spirit authenticated Role
      Path: /scout-spirit/
      Policies:
        - PolicyName: ScoutSpiritAuthenticatedUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: '*'
  UsersAuthenticatedRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref UsersIdentityPool
      Roles:
        authenticated: !GetAtt UsersAuthenticatedRole.Arn
        unauthenticated: !GetAtt UsersUnauthenticatedRole.Arn
  # Database
  BeneficiariesTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: group
          AttributeType: S
        - AttributeName: unit-user
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ByGroup
          KeySchema:
            - AttributeName: group
              KeyType: HASH
            - AttributeName: unit-user
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - nickname
              - birthdate
              - target
              - completed
              - score
              - full-name
          ProvisionedThroughput:
            ReadCapacityUnits: 4
            WriteCapacityUnits: 3
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 4
      TableName: beneficiaries
    Type: AWS::DynamoDB::Table
  RewardsTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: category
          AttributeType: S
        - AttributeName: release-id
          AttributeType: N
      KeySchema:
        - AttributeName: category
          KeyType: HASH
        - AttributeName: release-id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 2
      TableName: rewards
    Type: AWS::DynamoDB::Table
  TasksTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: objective
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
        - AttributeName: objective
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: tasks
    Type: AWS::DynamoDB::Table
  LogsTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: tag
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
        - AttributeName: tag
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: logs
    Type: AWS::DynamoDB::Table
  DistrictsTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: code
          AttributeType: S
      KeySchema:
        - AttributeName: code
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: districts
    Type: AWS::DynamoDB::Table
  GroupsTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: district
          AttributeType: S
        - AttributeName: code
          AttributeType: S
      KeySchema:
        - AttributeName: district
          KeyType: HASH
        - AttributeName: code
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TableName: groups
    Type: AWS::DynamoDB::Table
  # App
  DistrictsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/districts/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DistrictsTable
      Events:
        ListDistricts:
          Type: Api
          Properties:
            Path: /api/districts/
            Method: get
            RestApiId: !Ref PPSAPI
        GetDistrict:
          Type: Api
          Properties:
            Path: /api/districts/{district}/
            Method: get
            RestApiId: !Ref PPSAPI
  GroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/groups/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref GroupsTable
        - DynamoDBReadPolicy:
            TableName:
              !Ref DistrictsTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref BeneficiariesTable
        - Statement:
            - Sid: CognitoIDPAddUserToGroup
              Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
              Resource: '*'
      Events:
        CreateGroup:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/
            Method: post
            RestApiId: !Ref PPSAPI
            RequestModel:
              Model: NewGroup
              Required: true
        ListGroups:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/
            Method: get
            RestApiId: !Ref PPSAPI
        GetGroup:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/
            Method: get
            RestApiId: !Ref PPSAPI
        JoinGroup:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/beneficiaries/join/
            Method: post
            RestApiId: !Ref PPSAPI
            RequestModel:
              Model: Code
              Required: true
  ScoutersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/scouters/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref GroupsTable
        - Statement:
            - Sid: CognitoIDPAddUserToGroup
              Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
              Resource: '*'
      Events:
        GetScouter:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/scouters/{sub}
            Method: get
            RestApiId: !Ref PPSAPI
        ListScouters:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/scouters/
            Method: get
            RestApiId: !Ref PPSAPI
        SignupScouter:
          Type: Api
          Properties:
            Path: /api/auth/scouters-signup/
            Method: post
            RestApiId: !Ref PPSAPI
            Auth:
              Authorizer: NONE
            RequestModel:
              Model: ScouterSignUp
              Required: true
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/auth/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - Statement:
            - Sid: LoginPolicy
              Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
              Resource: '*'
      Events:
        ConfirmUser:
          Type: Api
          Properties:
            Path: /api/auth/confirm/
            Auth:
              Authorizer: NONE
            Method: post
            RestApiId: !Ref PPSAPI
            RequestModel:
              Model: Code
              Required: true
        LoginUser:
          Type: Api
          Properties:
            Path: /api/auth/login/
            Auth:
              Authorizer: NONE
            Method: post
            RestApiId: !Ref PPSAPI
            RequestModel:
              Model: Login
              Required: true
        RefreshToken:
          Type: Api
          Properties:
            Path: /api/auth/refresh/
            Auth:
              Authorizer: NONE
            Method: post
            RestApiId: !Ref PPSAPI
            RequestModel:
              Model: RefreshToken
              Required: true
  BeneficiariesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/beneficiaries/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref BeneficiariesTable
        - Statement:
            - Sid: CognitoIDPAddUserToGroup
              Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
              Resource: '*'
      Events:
        ListBeneficiariesInUnit:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/beneficiaries/{unit}/
            Method: get
            RestApiId: !Ref PPSAPI
        ListBeneficiariesInGroup:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/beneficiaries/
            Method: get
            RestApiId: !Ref PPSAPI
        GetBeneficiary:
          Type: Api
          Properties:
            Path: /api/beneficiaries/{sub}/
            Method: get
            RestApiId: !Ref PPSAPI
        SignupBeneficiary:
          Type: Api
          Properties:
            Path: /api/auth/beneficiaries-signup/
            Method: post
            RestApiId: !Ref PPSAPI
            Auth:
              Authorizer: NONE
            RequestModel:
              Model: BeneficiarySignUp
              Required: true
  GalleryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/gallery/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref BeneficiariesTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LogsTable
        - S3CrudPolicy:
            BucketName:
              !Ref S3BucketGallery
      Events:
        GetGalleryPictures:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/beneficiaries/{unit}/{sub}/gallery/
            Method: get
            RestApiId: !Ref PPSAPI
        AddPictureToGallery:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/beneficiaries/{unit}/{sub}/gallery/{index}/
            Method: post
            RestApiId: !Ref PPSAPI
        ReplaceGalleryPicture:
          Type: Api
          Properties:
            Path: /api/districts/{district}/groups/{group}/beneficiaries/{unit}/{sub}/gallery/{index}/
            Method: put
            RestApiId: !Ref PPSAPI
        GetAvatar:
          Type: Api
          Properties:
            Path: /api/beneficiaries/{sub}/avatar/
            Method: get
            RestApiId: !Ref PPSAPI
        UpdateAvatar:
          Type: Api
          Properties:
            Path: /api/beneficiaries/{sub}/avatar/
            Method: put
            RestApiId: !Ref PPSAPI
  RewardsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/rewards/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref BeneficiariesTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref RewardsTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LogsTable
      Events:
        ListMyItems:
          Type: Api
          Properties:
            Path: /api/rewards/mine/{category}/
            Method: get
            RestApiId: !Ref PPSAPI
        ListShopVersionItems:
          Type: Api
          Properties:
            Path: /api/rewards/{category}/{release}/
            Method: get
            RestApiId: !Ref PPSAPI
        GetShopItem:
          Type: Api
          Properties:
            Path: /api/rewards/{category}/{release}/{id}/
            Method: get
            RestApiId: !Ref PPSAPI
        CreateShopItem:
          Type: Api
          Properties:
            Path: /api/rewards/{category}/{release}/
            Method: post
            RestApiId: !Ref PPSAPI
        BuyItem:
          Type: Api
          Properties:
            Path: /api/rewards/{category}/{release}/{id}/buy/{area}/
            Method: post
            RestApiId: !Ref PPSAPI
        ClaimItem:
          Type: Api
          Properties:
            Path: /api/rewards/claim/
            Method: post
            RestApiId: !Ref PPSAPI
  TasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/tasks/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref BeneficiariesTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref TasksTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LogsTable
      Events:
        InitializeUserTasks:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/initialize/
            Method: post
            RestApiId: !Ref PPSAPI
        ListUserTasks:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/
            Method: get
            RestApiId: !Ref PPSAPI
        ListUserStageTasks:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/{stage}/
            Method: get
            RestApiId: !Ref PPSAPI
        ListUserAreaTasks:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/{stage}/{area}/
            Method: get
            RestApiId: !Ref PPSAPI
        GetUserTask:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/{stage}/{area}/{subline}/
            Method: get
            RestApiId: !Ref PPSAPI
        StartTask:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/{stage}/{area}/{subline}/
            Method: post
            RestApiId: !Ref PPSAPI
        UpdateActiveTask:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/active/
            Method: put
            RestApiId: !Ref PPSAPI
        GetActiveTask:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/active/
            Method: get
            RestApiId: !Ref PPSAPI
        DismissActiveTask:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/active/
            Method: delete
            RestApiId: !Ref PPSAPI
        CompleteActiveTask:
          Type: Api
          Properties:
            Path: /api/users/{sub}/tasks/active/complete/
            Method: post
            RestApiId: !Ref PPSAPI
  LogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pps/logs/
      Handler: app.handler
      Runtime: python3.8
      Layers:
        - !Ref PPSCore
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref BeneficiariesTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LogsTable
      Events:
        CreateUserLog:
          Type: Api
          Properties:
            Path: /api/users/{sub}/logs/{tag}/
            Method: post
            RestApiId: !Ref PPSAPI
        ListUserLogsWithTag:
          Type: Api
          Properties:
            Path: /api/users/{sub}/logs/{tag}/
            Method: get
            RestApiId: !Ref PPSAPI
  PinpointApp:
    Type: AWS::Pinpoint::App
    Properties:
      Name: Scout Spirit
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'
  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3BucketWebApp.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
  S3BucketWebApp:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: scout-spirit-webpage
      WebsiteConfiguration:
        IndexDocument: index.html
  S3BucketGallery:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: scout-spirit-gallery
      AccessControl: Private
  S3BucketWebAppPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketWebApp
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketWebApp}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
  S3BucketGalleryReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GalleryReadPolicy
      Roles:
        - !Ref UsersAuthenticatedRole
        - !Ref UsersUnauthenticatedRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListObjects"
            Resource:
              - !Sub
                - arn:aws:s3:::${BucketName}/public/*/*
                - BucketName: !Ref S3BucketGallery
  S3BucketGalleryUpdatePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GalleryUpdatePolicy
      Roles:
        - !Ref UsersAuthenticatedRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !Sub
                - arn:aws:s3:::${BucketName}/public/${UserId}/world/*.json
                - BucketName: !Ref S3BucketGallery
                  UserId: "${aws:userid}"
              - !Sub
                - arn:aws:s3:::${BucketName}/public/${UserId}/images/*.png
                - BucketName: !Ref S3BucketGallery
                  UserId: "${aws:userid}"
              - !Sub
                - arn:aws:s3:::${BucketName}/public/${UserId}/images/*.jpg
                - BucketName: !Ref S3BucketGallery
                  UserId: "${aws:userid}"

Outputs:
  AppAPI:
    Description: "API Gateway endpoint URL for Prod stage for PPS API"
    Value: !Sub "https://${PPSAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/"
  CloudFront:
    Description: "CloudFront PPS web app domain"
    Value: !GetAtt CloudfrontDistribution.DomainName
  DistrictsFunction:
    Description: "Districts Lambda Function ARN"
    Value: !GetAtt DistrictsFunction.Arn
  DistrictsFunctionIamRole:
    Description: "Implicit IAM Role created for the districts service"
    Value: !GetAtt DistrictsFunctionRole.Arn
  GroupsFunction:
    Description: "Groups Lambda Function ARN"
    Value: !GetAtt GroupsFunction.Arn
  GroupsFunctionIamRole:
    Description: "Implicit IAM Role created for the groups service"
    Value: !GetAtt GroupsFunctionRole.Arn
  ScoutersFunction:
    Description: "Scouters Lambda Function ARN"
    Value: !GetAtt ScoutersFunction.Arn
  ScoutersFunctionIamRole:
    Description: "Implicit IAM Role created for the scouters service"
    Value: !GetAtt ScoutersFunctionRole.Arn
  GalleryBucket:
    Description: "Implicit IAM Role created for the districts service"
    Value: !GetAtt S3BucketGallery.Arn